/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Catalog as PrismaCatalog,
  User as PrismaUser,
} from "@prisma/client";
import { CatalogCreateInput } from "./CatalogCreateInput";
import { Catalog } from "./Catalog";
import { CatalogFindManyArgs } from "./CatalogFindManyArgs";
import { CatalogFindUniqueArgs } from "./CatalogFindUniqueArgs";
import { CatalogWhereUniqueInput } from "./CatalogWhereUniqueInput";
import { CatalogUpdateInput } from "./CatalogUpdateInput";

export class CatalogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CatalogCountArgs, "select">): Promise<number> {
    return this.prisma.catalog.count(args);
  }

  async catalogs(args: Prisma.CatalogFindManyArgs): Promise<PrismaCatalog[]> {
    return this.prisma.catalog.findMany(args);
  }
  async catalog(
    args: Prisma.CatalogFindUniqueArgs
  ): Promise<PrismaCatalog | null> {
    return this.prisma.catalog.findUnique(args);
  }
  async createCatalog(args: Prisma.CatalogCreateArgs): Promise<PrismaCatalog> {
    return this.prisma.catalog.create(args);
  }
  async updateCatalog(args: Prisma.CatalogUpdateArgs): Promise<PrismaCatalog> {
    return this.prisma.catalog.update(args);
  }
  async deleteCatalog(args: Prisma.CatalogDeleteArgs): Promise<PrismaCatalog> {
    return this.prisma.catalog.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.catalog
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
  async CreateNewCatalog(args: CatalogCreateInput): Promise<Catalog> {
    throw new Error("Not implemented");
  }
  async GetAllCatalogs(args: CatalogFindManyArgs): Promise<Catalog[]> {
    throw new Error("Not implemented");
  }
  async GetCatalogById(args: CatalogFindUniqueArgs): Promise<Catalog> {
    throw new Error("Not implemented");
  }
  async RemoveCatalog(args: CatalogWhereUniqueInput): Promise<Catalog> {
    throw new Error("Not implemented");
  }
  async UpdateExistingCatalog(args: CatalogUpdateInput): Promise<Catalog> {
    throw new Error("Not implemented");
  }
}
