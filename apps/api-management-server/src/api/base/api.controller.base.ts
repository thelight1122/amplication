/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ApiService } from "../api.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ApiCreateInput } from "./ApiCreateInput";
import { Api } from "./Api";
import { ApiFindManyArgs } from "./ApiFindManyArgs";
import { ApiWhereUniqueInput } from "./ApiWhereUniqueInput";
import { ApiUpdateInput } from "./ApiUpdateInput";
import { CatalogUpdateInput } from "../../catalog/base/CatalogUpdateInput";
import { Catalog } from "../../catalog/base/Catalog";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ApiControllerBase {
  constructor(
    protected readonly service: ApiService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Api })
  @nestAccessControl.UseRoles({
    resource: "Api",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createApi(@common.Body() data: ApiCreateInput): Promise<Api> {
    return await this.service.createApi({
      data: {
        ...data,

        service: data.service
          ? {
              connect: data.service,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        endpoint: true,
        id: true,
        method: true,

        service: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Api] })
  @ApiNestedQuery(ApiFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Api",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async apis(@common.Req() request: Request): Promise<Api[]> {
    const args = plainToClass(ApiFindManyArgs, request.query);
    return this.service.apis({
      ...args,
      select: {
        createdAt: true,
        description: true,
        endpoint: true,
        id: true,
        method: true,

        service: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Api })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Api",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async api(@common.Param() params: ApiWhereUniqueInput): Promise<Api | null> {
    const result = await this.service.api({
      where: params,
      select: {
        createdAt: true,
        description: true,
        endpoint: true,
        id: true,
        method: true,

        service: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Api })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Api",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateApi(
    @common.Param() params: ApiWhereUniqueInput,
    @common.Body() data: ApiUpdateInput
  ): Promise<Api | null> {
    try {
      return await this.service.updateApi({
        where: params,
        data: {
          ...data,

          service: data.service
            ? {
                connect: data.service,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          endpoint: true,
          id: true,
          method: true,

          service: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Api })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Api",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteApi(
    @common.Param() params: ApiWhereUniqueInput
  ): Promise<Api | null> {
    try {
      return await this.service.deleteApi({
        where: params,
        select: {
          createdAt: true,
          description: true,
          endpoint: true,
          id: true,
          method: true,

          service: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/apis")
  @swagger.ApiOkResponse({
    type: Catalog,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateNewApi(
    @common.Body()
    body: CatalogUpdateInput
  ): Promise<Catalog> {
    return this.service.CreateNewApi(body);
  }

  @common.Get("/apis")
  @swagger.ApiOkResponse({
    type: Catalog,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetAllApIs(
    @common.Body()
    body: CatalogUpdateInput
  ): Promise<Catalog[]> {
    return this.service.GetAllApIs(body);
  }

  @common.Get("/apis/:id")
  @swagger.ApiOkResponse({
    type: Catalog,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetApiById(
    @common.Body()
    body: CatalogUpdateInput
  ): Promise<Catalog> {
    return this.service.GetApiById(body);
  }

  @common.Delete("/apis/:id")
  @swagger.ApiOkResponse({
    type: Catalog,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async RemoveApi(
    @common.Body()
    body: CatalogUpdateInput
  ): Promise<Catalog> {
    return this.service.RemoveApi(body);
  }

  @common.Put("/apis/:id")
  @swagger.ApiOkResponse({
    type: Catalog,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UpdateExistingApi(
    @common.Body()
    body: CatalogUpdateInput
  ): Promise<Catalog> {
    return this.service.UpdateExistingApi(body);
  }
}
